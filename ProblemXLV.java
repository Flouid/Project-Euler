import java.util.ArrayList;

/**
 * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
 *
 * Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
 * Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
 * Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
 * It can be verified that T285 = P165 = H143 = 40755.
 *
 * Find the next triangle number that is also pentagonal and hexagonal.
 */

public class ProblemXLV {
    public static void main(String[] args) {
        final double startTime = System.nanoTime();                                 //Starts recording runtime
        int threshold = 60000;
        ArrayList<Integer> triangleList = ProblemXLII.triangleNumberList(threshold);
        ArrayList<Integer> pentagonalList = pentagonalNumberList(threshold);
        ArrayList<Integer> hexagonalList = hexagonalNumberList(threshold);
        for (int triangle: triangleList) {
            if ((pentagonalList.contains(triangle)) && (hexagonalList.contains(triangle))) {
                System.out.println(triangle);
            }
        }
        final double duration = (System.nanoTime() - startTime) / 1000000000;       //Calculates runtime in seconds
        System.out.println("found in " + duration + " seconds");                    //Outputs runtime
    }

    private static ArrayList<Integer> pentagonalNumberList(int n) {
        //generates a list of n triangle numbers (y values that satisfy y = x/2(x + 1) where x is an integer)
        ArrayList<Integer> pentagonalList = new ArrayList<>();
        for (double i = 1; i <= n; i++) {
            pentagonalList.add((int) (((3 * i * i) - i) / 2));
        }
        return pentagonalList;
    }

    private static ArrayList<Integer> hexagonalNumberList(int n) {
        //generates a list of n triangle numbers (y values that satisfy y = x/2(x + 1) where x is an integer)
        ArrayList<Integer> hexagonalList = new ArrayList<>();
        for (double i = 1; i <= n; i++) {
            hexagonalList.add((int) ((2 * i * i) - i));
        }
        return hexagonalList;
    }
}
